-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_etl_test_fw is

  constant IPBUS_SEL_WIDTH: positive := 4;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_etl_test_fw(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically generated VHDL (Tue May 23 18:36:42 2023)
  constant N_SLV_LOOPBACK: integer := 0;
  constant N_SLV_FW_INFO: integer := 1;
  constant N_SLV_READOUT_BOARD_0: integer := 2;
  constant N_SLV_READOUT_BOARD_1: integer := 3;
  constant N_SLV_READOUT_BOARD_2: integer := 4;
  constant N_SLV_READOUT_BOARD_3: integer := 5;
  constant N_SLV_READOUT_BOARD_4: integer := 6;
  constant N_SLV_SYSTEM: integer := 7;
  constant N_SLV_DAQ_RB0: integer := 8;
  constant N_SLV_DAQ_RB1: integer := 9;
  constant N_SLV_DAQ_RB2: integer := 10;
  constant N_SLV_DAQ_RB3: integer := 11;
  constant N_SLV_DAQ_RB4: integer := 12;
  constant N_SLAVES: integer := 13;
-- END automatically generated VHDL

    
end ipbus_decode_etl_test_fw;

package body ipbus_decode_etl_test_fw is

  function ipbus_sel_etl_test_fw(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically generated VHDL (Tue May 23 18:36:42 2023)
    if    std_match(addr, "-------00000----0000------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_LOOPBACK, IPBUS_SEL_WIDTH)); -- LOOPBACK / base 0x00000000 / mask 0x01f0f000
    elsif std_match(addr, "-------00000----0001------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_FW_INFO, IPBUS_SEL_WIDTH)); -- FW_INFO / base 0x00001000 / mask 0x01f0f000
    elsif std_match(addr, "-------00000----0010------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_READOUT_BOARD_0, IPBUS_SEL_WIDTH)); -- READOUT_BOARD_0 / base 0x00002000 / mask 0x01f0f000
    elsif std_match(addr, "-------00000----0011------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_READOUT_BOARD_1, IPBUS_SEL_WIDTH)); -- READOUT_BOARD_1 / base 0x00003000 / mask 0x01f0f000
    elsif std_match(addr, "-------00000----0100------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_READOUT_BOARD_2, IPBUS_SEL_WIDTH)); -- READOUT_BOARD_2 / base 0x00004000 / mask 0x01f0f000
    elsif std_match(addr, "-------00000----0101------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_READOUT_BOARD_3, IPBUS_SEL_WIDTH)); -- READOUT_BOARD_3 / base 0x00005000 / mask 0x01f0f000
    elsif std_match(addr, "-------00000----0110------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_READOUT_BOARD_4, IPBUS_SEL_WIDTH)); -- READOUT_BOARD_4 / base 0x00006000 / mask 0x01f0f000
    elsif std_match(addr, "-------00000----1011------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SYSTEM, IPBUS_SEL_WIDTH)); -- SYSTEM / base 0x0000b000 / mask 0x01f0f000
    elsif std_match(addr, "-------00001--------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_RB0, IPBUS_SEL_WIDTH)); -- DAQ_RB0 / base 0x00100000 / mask 0x01f00000
    elsif std_match(addr, "-------00010--------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_RB1, IPBUS_SEL_WIDTH)); -- DAQ_RB1 / base 0x00200000 / mask 0x01f00000
    elsif std_match(addr, "-------00100--------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_RB2, IPBUS_SEL_WIDTH)); -- DAQ_RB2 / base 0x00400000 / mask 0x01f00000
    elsif std_match(addr, "-------01000--------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_RB3, IPBUS_SEL_WIDTH)); -- DAQ_RB3 / base 0x00800000 / mask 0x01f00000
    elsif std_match(addr, "-------10000--------------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_RB4, IPBUS_SEL_WIDTH)); -- DAQ_RB4 / base 0x01000000 / mask 0x01f00000
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_etl_test_fw;

end ipbus_decode_etl_test_fw;

