#+OPTIONS: ^:nil
#+EXPORT_EXCLUDE_TAGS: noexport
#+TITLE: ETL Test Stand Firmware
* Table of Contents :TOC_4:
  - [[#build-instructions][Build Instructions]]
  - [[#directories][Directories]]
  - [[#updating-register-definitions][Updating Register Definitions]]
  - [[#block-diagram][Block Diagram]]
  - [[#optical-connections][Optical Connections]]
  - [[#hardware-setup][Hardware Setup]]
    - [[#xdma][XDMA]]
    - [[#ethernet][Ethernet]]

** Build Instructions
To build the firmware, simply clone the repository and run:
#+begin_src
make init
make all
#+end_src
** Directories
#+begin_src
├── README.org     -- This readme
├── Makefile       -- GNU Makefile
├── readout_board  -- Readout Board Firmware
├── etroc          -- ETROC Firmware
├── wrappers       -- Wrappers around IP/Submodules
├── xdc            -- XDC Constraints Files
├── doc            -- Documentation & Images
├── ip             -- Xilinx IP
├── lpgbt-fpga     -- Submodule: LPGBT-FPGA Core
├── gbt-sc         -- Submodule: CERN GBT-SC Core
├── ipbus-firmware -- Submodule: IPBus Firmware
├── Top            -- Hog Projects
└── Hog            -- Hog Build System
#+end_src
** Updating Register Definitions
To update register definitions, you should change the corresponding XML file and then run
#+begin_src
make reg
#+end_src
** Block Diagram
[[file:doc/structure/structure.gv.svg]]
** Optical Connections

|----------------+---------------|
| Function       | Fiber Number  |
|----------------+---------------|
| Downlink       | RX (Fiber 7)  |
| DAQ Uplink     | TX1 (Fiber 6) |
| Trigger Uplink | TX2 (Fiber 5) |
|----------------+---------------|

** Hardware Setup
Details of the hardware setup and a shopping list can be read at [[file:doc/shopping.org][shopping]].
*** XDMA
We are using the Xilinx PCIE XDMA driver for register access to the KCU105 board. It is configured
for 8 GT/s, 1 lane PCIE (we can expand the number of lanes in the future if needed).

Details of the XDMA setup and installationcan be read at  [[file:doc/XDMA.org][XDMA]].
*** Ethernet

A gigabit ethernet port may also be used for control.
#+begin_src bash
sudo /sbin/ifconfig eth0 192.168.0.130 netmask 255.255.255.0 broadcast 192.168.0.255
sudo /sbin/ifconfig eth0 192.168.0.130 netmask 255.255.0.0 broadcast 192.168.0.255
sudo /sbin/route add -net 192.168.0.10 netmask 255.255.255.255 dev eth0
#+end_src

