#+OPTIONS: ^:nil
#+EXPORT_EXCLUDE_TAGS: noexport
* Table of Contents :TOC:
- [[#etl-test-stand-firmware][ETL Test Stand Firmware]]
  - [[#build-instructions][Build Instructions]]
  - [[#directories][Directories]]
  - [[#block-diagram][Block Diagram]]
  - [[#hardware-setup][Hardware Setup]]
  - [[#xdma][XDMA]]

* ETL Test Stand Firmware

This is the firmware used for the CMS Endcap Timing Layer (ETL) module and readout board test stands.

** Build Instructions
#+begin_src
make
#+end_src

(make sure you ~git submodule init && git submodule update~ first)
** Directories
#+begin_src
├── README.org     -- This readme
├── Makefile       -- GNU Makefile
├── readout_board  -- Readout Board Firmware
├── etroc          -- ETROC Firmware
├── wrappers       -- Wrappers around IP/Submodules
├── xdc            -- XDC Constraints Files
├── doc            -- Documentation & Images
├── ip             -- Xilinx IP
├── lpgbt-fpga     -- Submodule: LPGBT-FPGA Core
├── gbt-sc         -- Submodule: CERN GBT-SC Core
├── ipbus-firmware -- Submodule: IPBus Firmware
├── Top            -- Hog Projects
└── Hog            -- Hog Build System
#+end_src
** Block Diagram
[[file:doc/structure/structure.gv.svg]]
** Hardware Setup
The ETL Test Stand Firmware is designed to run on a KCU105 evaluation board: https://www.xilinx.com/products/boards-and-kits/kcu105.html
#+attr_org: :width 1000px
[[file:doc/images/kcu_105.png]]

The KCU105 board has optics available on 2 SFPs and on a Firefly FMC.

The two SFP modules are included with the development kit and allow for connection to one LPGBT
each. This can be used for example to connect to two readout boards (DAQ only), or one readout board
(DAQ + Trigger).

Eight additional transceivers can be connected with a Firefly FMC, available at
https://www.samtec.com/kits/optics-fpga/14g-firefly-fmc. The of whether the FMC is required should
be made by each test stand.

*** Additional Shopping
Some additional components are needed to connect to a readout board.  Other additional components are optional.
**** VTRX Optical Adapter
The readout board features VTRX+ optics, which have a (female) MT12 Ferrule. To connect this to the
KCU105 board, you need to break this out into LC connectors.

The "proper" way to connect to the VTRX is with an actual MT ferrule with a spring clamp, but a male
MTP connector works fine.

***** Option A: Fanout Cable
You can use an "octopus cable" e.g.
 - https://www.fibertronics.com/1m-mtp-male-to-12-lc-upc-12-fiber-multimode-om3-50125-breakout-cable
 - 1m, MTP Male to 12 LC UPC, 12 Fiber Multimode OM3 50/125 Fanout Cable
 - $130

You also then need some LC fibers of whatever length you choose. e.g.
  - https://www.fibertronics.com/3m-lc-to-lc-duplex-om3-multimode-fiber-optic-patch-cable
  - 3m, LC to LC, Duplex, OM3 Multimode Patch Cable
  - Multimode, OM3, 50/125, 10Gb, 3.0mm, PVC (OFNR)

You also need some LC adapters, e.g.
 - https://www.fibertronics.com/lc-duplex-mm-10gb-om3-adapter-wo-flange-aqua
 - LC Duplex Aqua Adapter without Flange

***** Option B: Cassette
Another nice option that can be quite a bit more organized on the benchtop is to use a fiber
cassette. e.g.

You need one cassette:
- FHD-1MTP6LCDSMFA
- https://www.fs.com/products/57016.html

You need an MTP M-F connector
- MT-KL4EAP001MCS
- 1m, 12 Fiber MTP Cable, Multimode OM4, MPO - MPO
- Male to Female, Multimode, OM4, 50/125, ONFP, Method A
- https://www.fibertronics.com/1m-12-fiber-mtp-m-f-multimode-om4-method-a-4

You need several OM3 LC patch cables (of the length you prefer), e.g.
- PC-KK7S3AV01M
- 1m, LC to LC, Simplex, Multimode 50/125 Patch Cable
- Multimode, OM3, 50/125, 3.0mm, PVC (OFNR)
- https://www.fibertronics.com/1m-lc-to-lc-simplex-multimode-50125-patch-cable
**** Firefly Mezzanine Optical Components
The firefly adapter has a single MTP24 connector which mates with an MPO male (see drawing at:
http://suddendocs.samtec.com/prints/ref-193429-01-mkt.pdf)

This can be broken out to LCs with a cassette , e.g. https://www.fs.com/products/57024.html, which
mates with an MPO female. We

The two can be connected together with a 24 fiber MPO Male to Female cable, e.g.
https://www.fibertronics.com/1m-24-fiber-mtp-m-f-multimode-om4-pin-1-13-2

You then need a number of LC fiber patch cables to connect to the readout boards (through the breakouts described above).
**** Clock Source

** XDMA

We are using the Xilinx PCIE XDMA driver for register access to the KCU105 board. It is configured
for 8 GT/s, 1 lane PCIE (we can expand the number of lanes in the future if needed).

The open source XDMA driver must be installed on a Linux PC in order to use the board.

*** Installation
**** 1. Install the XDMA Kernel Driver
Based on instructions from https://www.xilinx.com/support/answers/65444.html

XDMA driver should be compiled from source. Code is at:
https://xilinx.github.io/dma_ip_drivers/2019.2/linux-kernel/html/build.html

A working recipe tested on Ubuntu 16.04 is:

#+BEGIN_SRC  sh
sudo apt-get install libaio1 libaio-dev
git clone https://github.com/Xilinx/dma_ip_drivers
cd dma_ip_drivers/QDMA/linux-kernel
make clean && make
sudo make install
sudo insmod bin/qdma-pf.ko
#+END_SRC

**** 2. Set up XDMA uDEV Rules

For non-root access to the XDMA driver you should add a udev rule:

#+BEGIN_SRC bash
sudo wget https://github.com/RHSResearchLLC/XilinxAR65444/raw/master/Linux/Xilinx_Answer_65444_Linux_Files/etc/udev/rules.d/xdma-udev-command.sh https://github.com/RHSResearchLLC/XilinxAR65444/raw/master/Linux/Xilinx_Answer_65444_Linux_Files/etc/udev/rules.d/60-xdma.rules -P /etc/udev/rules.d/
sudo udevadm control --reload-rules
sudo udevadm trigger
#+END_SRC

**** 3. Reboot
n.b you may need to reboot after installation before this works
 - try rebooting with a bitstream loaded already

**** 4. Check for the XDMA Device

The lspci command in Unix can be used to list and display information about devices connected to the
system’s PCI(e) buses. After running ~/sys/bus/pci/rescan~, you should run lspci to check that the
Xilinx device has been detected correctly - if it is, the output of lspci will contain a line like:

#+BEGIN_EXAMPLE
01:00.0 Serial controller: Xilinx Corporation Device 8031
#+END_EXAMPLE

You should also now see xdma devices in ~/dev/~, e.g.
#+begin_src bash
$ ls /dev/x*
/dev/xdma0_c2h_0     /dev/xdma0_events_10  /dev/xdma0_events_14  /dev/xdma0_events_4  /dev/xdma0_events_8
/dev/xdma0_control   /dev/xdma0_events_11  /dev/xdma0_events_15  /dev/xdma0_events_5  /dev/xdma0_events_9
/dev/xdma0_events_0  /dev/xdma0_events_12  /dev/xdma0_events_2   /dev/xdma0_events_6  /dev/xdma0_h2c_0
/dev/xdma0_events_1  /dev/xdma0_events_13  /dev/xdma0_events_3   /dev/xdma0_events_7
#+end_src

